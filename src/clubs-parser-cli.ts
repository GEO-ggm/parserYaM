#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import * as readline from 'readline';
import { getRegionsPath } from './build-config';
import { NetworkClubsScraper } from '../scripts/network-clubs-scraper';
import { yandexMapsParser } from '../scripts/yandex-maps-parser';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface RegionInfo {
  id: number;
  name: string;
  url: string;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å CLI
export class ClubsParserCLI {
  private regions: RegionInfo[] = [];
  private rl: readline.Interface;

  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async init() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
    await this.loadRegions();
  }

  private async loadRegions() {
    const regionsPath = getRegionsPath();
    
    if (!fs.existsSync(regionsPath)) {
      console.error(`‚ùå –§–∞–π–ª —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${regionsPath}`);
      console.error(`üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª regions-simple.json –Ω–∞—Ö–æ–¥–∏—Ç—Å—è:`);
      console.error(`   - –í –ø–∞–ø–∫–µ results/ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)`);
      console.error(`   - –†—è–¥–æ–º —Å EXE —Ñ–∞–π–ª–æ–º (–¥–ª—è production)`);
      process.exit(1);
    }
    
    try {
      const regionsData = fs.readFileSync(regionsPath, 'utf-8');
      this.regions = JSON.parse(regionsData);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤:`, error);
      process.exit(1);
    }
  }

  async showMainMenu() {
    console.clear();
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë     üó∫Ô∏è  –ü–ê–†–°–ï–† –ö–û–ú–ü–¨–Æ–¢–ï–†–ù–´–• –ö–õ–£–ë–û–í     ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log('');
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    console.log('  1. –ü–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω');
    console.log('  2. –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã');
    console.log('  3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤');
    console.log('  4. –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é');
    console.log('  0. –í—ã—Ö–æ–¥');
    console.log('');
  }

  private question(prompt: string): Promise<string> {
    return new Promise((resolve) => {
      this.rl.question(prompt, (answer) => {
        resolve(answer);
      });
    });
  }

  async selectRegion(): Promise<RegionInfo | null> {
    const choice = await this.question('–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: ');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ ID
    const regionId = parseInt(choice, 10);
    if (!isNaN(regionId)) {
      const region = this.regions.find(r => r.id === regionId);
      if (region) return region;
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const searchTerm = choice.toLowerCase();
    const matchedRegions = this.regions.filter(r => 
      r.name.toLowerCase().includes(searchTerm)
    );
    
    if (matchedRegions.length === 0) {
      console.log('‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
    
    if (matchedRegions.length === 1) {
      return matchedRegions[0];
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
    console.log('\n–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:');
    matchedRegions.slice(0, 10).forEach((r, i) => {
      console.log(`  ${i + 1}. [ID: ${r.id}] ${r.name}`);
    });
    
    const index = await this.question('\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞: ');
    const selectedIndex = parseInt(index, 10) - 1;
    
    if (selectedIndex >= 0 && selectedIndex < matchedRegions.length) {
      return matchedRegions[selectedIndex];
    }
    
    return null;
  }

  async showRegionsList() {
    console.clear();
    console.log('üìã –°–ü–ò–°–û–ö –í–°–ï–• –†–ï–ì–ò–û–ù–û–í:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    const russianRegions = this.regions.filter(r => r.id < 84);
    const otherRegions = this.regions.filter(r => r.id >= 84);
    
    console.log('\nüá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã:');
    russianRegions.forEach(region => {
      console.log(`  ${region.id.toString().padStart(3)}: ${region.name}`);
    });
    
    if (otherRegions.length > 0) {
      console.log('\nüåç –î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã:');
      otherRegions.forEach(region => {
        console.log(`  ${region.id.toString().padStart(3)}: ${region.name}`);
      });
    }
    
    await this.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
  }

  async searchRegions() {
    const searchTerm = await this.question('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: ');
    const results = this.regions.filter(r => 
      r.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    if (results.length === 0) {
      console.log('‚ùå –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log(`\nüìç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${results.length}`);
      results.forEach(region => {
        console.log(`  [ID: ${region.id}] ${region.name}`);
      });
    }
    
    await this.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
  }

  async parseRegion(region: RegionInfo) {
    console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–∞: ${region.name} (ID: ${region.id})`);
    console.log(`üîó URL: ${region.url}`);
    
    const scraper = new NetworkClubsScraper(yandexMapsParser);
    
    try {
      await scraper.init();
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      scraper.clearRegionData();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ URL —Ä–µ–≥–∏–æ–Ω–∞
      if (scraper.page) {
        await scraper.page.goto(region.url, { 
          waitUntil: 'networkidle',
          timeout: 30000 
        });
        
        console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
        await scraper.page.waitForTimeout(3000);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∏ –≤ run-network-scraper)
        await scraper['scrollToTriggerRequests'](15);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await scraper.page.waitForTimeout(2000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const uniqueClubs = scraper.removeDuplicates(scraper.clubsData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª—É–±—É
        uniqueClubs.forEach((club: any) => {
          club.regionId = region.id;
          club.regionName = region.name;
          club.sourceRegionUrl = region.url;
        });
        
        console.log(`‚úÖ –†–µ–≥–∏–æ–Ω ${region.name}: –Ω–∞–π–¥–µ–Ω–æ ${uniqueClubs.length} –∫–ª—É–±–æ–≤`);
        console.log(`üåê Network –∑–∞–ø—Ä–æ—Å–æ–≤: ${scraper.networkRequests}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await this.saveResults({
          totalFound: uniqueClubs.length,
          clubs: uniqueClubs,
          region: region.name,
          regionId: region.id,
          timestamp: new Date().toISOString(),
          networkRequests: scraper.networkRequests
        }, region);
        
        await scraper.close();
        return uniqueClubs;
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–≥–∏–æ–Ω–∞:`, error);
      await scraper.close();
      return [];
    }
  }

  async parseAllRegions() {
    console.log(`\nüåç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (${this.regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤)`);
    
    const allClubs: any[] = [];
    let successCount = 0;
    let totalNetworkRequests = 0;
    
    for (let i = 0; i < this.regions.length; i++) {
      const region = this.regions[i];
      console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üìç –†–µ–≥–∏–æ–Ω ${i + 1}/${this.regions.length}: ${region.name}`);
      
      const scraper = new NetworkClubsScraper(yandexMapsParser);
      
      try {
        await scraper.init();
        scraper.clearRegionData();
        
        if (scraper.page) {
          await scraper.page.goto(region.url, { 
            waitUntil: 'networkidle',
            timeout: 30000 
          });
          
          console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
          await scraper.page.waitForTimeout(3000);
          
          await scraper['scrollToTriggerRequests'](15);
          await scraper.page.waitForTimeout(2000);
          
          const uniqueClubs = scraper.removeDuplicates(scraper.clubsData);
          
          uniqueClubs.forEach((club: any) => {
            club.regionId = region.id;
            club.regionName = region.name;
            club.sourceRegionUrl = region.url;
          });
          
          if (uniqueClubs.length > 0) {
            allClubs.push(...uniqueClubs);
            successCount++;
            totalNetworkRequests += scraper.networkRequests;
          }
          
          console.log(`‚úÖ –†–µ–≥–∏–æ–Ω ${region.name}: –Ω–∞–π–¥–µ–Ω–æ ${uniqueClubs.length} –∫–ª—É–±–æ–≤`);
        }
        
        await scraper.close();
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.name}:`, error);
        await scraper.close();
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
      if (i < this.regions.length - 1) {
        console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await this.saveAllResults({
      totalRegions: this.regions.length,
      successfulRegions: successCount,
      totalClubs: allClubs.length,
      clubs: allClubs,
      timestamp: new Date().toISOString(),
      networkRequests: totalNetworkRequests
    });
  }

  async saveResults(result: any, region: RegionInfo) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `clubs-${region.name}-${timestamp}.json`;
    const csvFilename = `clubs-${region.name}-${timestamp}.csv`;
    
    const resultsPath = path.join(process.cwd(), 'results', filename);
    const csvPath = path.join(process.cwd(), 'results', csvFilename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
    console.log(`üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${resultsPath}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    const csvContent = this.generateCSV(result.clubs);
    fs.writeFileSync(csvPath, csvContent, 'utf-8');
    console.log(`üìä CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${csvPath}`);
  }

  async saveAllResults(result: any) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `clubs-all-regions-${timestamp}.json`;
    const csvFilename = `clubs-all-regions-${timestamp}.csv`;
    
    const resultsPath = path.join(process.cwd(), 'results', filename);
    const csvPath = path.join(process.cwd(), 'results', csvFilename);
    
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }
    
    fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
    fs.writeFileSync(csvPath, this.generateCSV(result.clubs), 'utf-8');
    
    console.log(`\nüìã –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${result.successfulRegions}/${result.totalRegions}`);
    console.log(`üè¢ –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.totalClubs}`);
    console.log(`üåê Network –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.networkRequests}`);
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
  }

  private generateCSV(clubs: any[]): string {
    const header = 'ID —Ä–µ–≥–∏–æ–Ω–∞,–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞,–ù–∞–∑–≤–∞–Ω–∏–µ,–ê–¥—Ä–µ—Å,–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å,–°—Ç—Ä–∞–Ω–∞,–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥,–¢–µ–ª–µ—Ñ–æ–Ω,–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã,–°–∞–π—Ç,–í—Å–µ —Å–∞–π—Ç—ã,–†–µ–π—Ç–∏–Ω–≥,–û—Ç–∑—ã–≤—ã,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫,–ö–∞—Ç–µ–≥–æ—Ä–∏–∏,–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã,–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏,–®–∏—Ä–æ—Ç–∞,–î–æ–ª–≥–æ—Ç–∞,–§–æ—Ç–æ,–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã\n';
    
    const rows = clubs.map(club => {
      const lat = club.coordinates?.lat || '';
      const lon = club.coordinates?.lon || '';
      const phones = club.phones?.join('; ') || club.phone || '';
      const websites = club.websites?.join('; ') || club.website || '';
      const categories = club.categories?.join('; ') || '';
      const socialLinks = club.socialLinks?.map((link: { type: any; url: any; }) => `${link.type}: ${link.url}`).join('; ') || '';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
      const yandexMapsUrl = (club.urlSeoname && club.urlId) 
        ? `https://yandex.ru/maps/org/${club.urlSeoname}/${club.urlId}`
        : '';
      
      return `"${club.regionId || ''}",` +
             `"${(club.regionName || '').replace(/"/g, '""')}",` +
             `"${(club.name || '').replace(/"/g, '""')}",` +
             `"${(club.address || '').replace(/"/g, '""')}",` +
             `"${(club.fullAddress || '').replace(/"/g, '""')}",` +
             `"${(club.country || '').replace(/"/g, '""')}",` +
             `"${(club.postalCode || '').replace(/"/g, '""')}",` +
             `"${(club.phone || '').replace(/"/g, '""')}",` +
             `"${phones.replace(/"/g, '""')}",` +
             `"${(club.website || '').replace(/"/g, '""')}",` +
             `"${websites.replace(/"/g, '""')}",` +
             `"${club.rating || ''}",` +
             `"${club.reviews || ''}",` +
             `"${club.ratingCount || ''}",` +
             `"${categories.replace(/"/g, '""')}",` +
             `"${(club.workingHours || '').replace(/"/g, '""')}",` +
             `"${socialLinks.replace(/"/g, '""')}",` +
             `"${lat}",` +
             `"${lon}",` +
             `"${(club.photo || '').replace(/"/g, '""')}",` +
             `"${yandexMapsUrl}"`;
    }).join('\n');
    
    return header + rows;
  }

  async run() {
    await this.init();
    
    let exit = false;
    
    while (!exit) {
      await this.showMainMenu();
      const choice = await this.question('–í–∞—à –≤—ã–±–æ—Ä: ');
      
      switch (choice) {
        case '1':
          const region = await this.selectRegion();
          if (region) {
            await this.parseRegion(region);
            await this.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
          }
          break;
          
        case '2':
          const confirm = await this.question('\n‚ö†Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ');
          if (confirm.toLowerCase() === 'y') {
            await this.parseAllRegions();
            await this.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
          }
          break;
          
        case '3':
          await this.showRegionsList();
          break;
          
        case '4':
          await this.searchRegions();
          break;
          
        case '0':
          exit = true;
          break;
          
        default:
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
          await this.question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
      }
    }
    
    this.rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
  const parser = new ClubsParserCLI();
  
  try {
    await parser.run();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
} 
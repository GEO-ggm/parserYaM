import { runNetworkClubsScraping } from './network-clubs-scraper';
import { yandexMapsParser } from './yandex-maps-parser';
import * as fs from 'fs';
import * as path from 'path';

interface RegionData {
  id: number;
  name: string;
  url: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö
function loadRegions(): RegionData[] {
  const regionsPath = path.join(process.cwd(), 'results', 'regions-simple.json');
  
  if (!fs.existsSync(regionsPath)) {
    throw new Error(`–§–∞–π–ª —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${regionsPath}`);
  }
  
  const regionsData = fs.readFileSync(regionsPath, 'utf-8');
  return JSON.parse(regionsData);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ ID
function findRegionById(regions: RegionData[], id: number): RegionData | null {
  return regions.find(region => region.id === id) || null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ network
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const regionArg = args[0];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
    const regions = loadRegions();
    
    let targetRegions: RegionData[] = [];
    let outputSuffix = '';
    
    if (!regionArg || regionArg === 'global') {
      // –†–µ–∂–∏–º "global" - –ø–∞—Ä—Å–∏–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
      targetRegions = regions;
      outputSuffix = 'all-regions';
      console.log(`üåç –†–µ–∂–∏–º: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º (${regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤)`);
    } else {
      // –†–µ–∂–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      const regionId = parseInt(regionArg, 10);
      
      if (isNaN(regionId)) {
        console.error('‚ùå –û—à–∏–±–∫–∞: ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  npm run network-scraper        - –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º');
        console.log('  npm run network-scraper global - –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º');
        console.log('  npm run network-scraper 10     - –ø–æ —Ä–µ–≥–∏–æ–Ω—É —Å ID 10');
        process.exit(1);
      }
      
      const region = findRegionById(regions, regionId);
      if (!region) {
        console.error(`‚ùå –†–µ–≥–∏–æ–Ω —Å ID ${regionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:');
        regions.slice(0, 10).forEach(r => {
          console.log(`  ${r.id}: ${r.name}`);
        });
        console.log(`  ... –∏ –µ—â–µ ${regions.length - 10} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
        process.exit(1);
      }
      
      targetRegions = [region];
      outputSuffix = `region-${regionId}`;
      console.log(`üéØ –†–µ–∂–∏–º: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω—É "${region.name}" (ID: ${regionId})`);
    }
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—É–±–∞—Ö —á–µ—Ä–µ–∑ network-–∑–∞–ø—Ä–æ—Å—ã...\n`);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞
    const scrollIterations = 15;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    const result = await runNetworkClubsScrapingForRegions(
      targetRegions, 
      yandexMapsParser, 
      scrollIterations, 
      outputSuffix
    );
    
    console.log('\n‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
async function runNetworkClubsScrapingForRegions(
  regions: RegionData[],
  parser: any,
  scrollIterations: number,
  outputSuffix: string
) {
  const allClubs: any[] = [];
  let totalNetworkRequests = 0;
  
  for (const region of regions) {
    console.log(`\nüìç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${region.name} (ID: ${region.id})`);
    console.log(`üîó URL: ${region.url}`);
    
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º URL –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      const originalConfig = require('../config/yandex-maps.config');
      const tempConfig = { ...originalConfig.yandexMapsConfig };
      tempConfig.startUrl = region.url;
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –Ω–æ–≤—ã–º URL
      const { NetworkClubsScraper } = await import('./network-clubs-scraper');
      const scraper = new NetworkClubsScraper(parser);
      
      await scraper.init();
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      scraper.clearRegionData();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ URL —Ä–µ–≥–∏–æ–Ω–∞
      if (scraper['page']) {
        await scraper['page'].goto(region.url, { 
          waitUntil: 'networkidle',
          timeout: 30000 
        });
        
        console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
        await scraper['page'].waitForTimeout(3000);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await scraper['scrollToTriggerRequests'](scrollIterations);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await scraper['page'].waitForTimeout(2000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const regionClubs = scraper['removeDuplicates'](scraper['clubsData']);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª—É–±—É
        regionClubs.forEach((club: any) => {
          club.regionId = region.id;
          club.regionName = region.name;
          club.sourceRegionUrl = region.url;
        });
        
        allClubs.push(...regionClubs);
        totalNetworkRequests += scraper['networkRequests'];
        
        console.log(`‚úÖ –†–µ–≥–∏–æ–Ω ${region.name}: –Ω–∞–π–¥–µ–Ω–æ ${regionClubs.length} –∫–ª—É–±–æ–≤`);
      }
      
      await scraper.close();
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ ${region.name}:`, error);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    if (regions.length > 1) {
      console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = {
    totalFound: allClubs.length,
    clubs: allClubs,
    regionsProcessed: regions.length,
    timestamp: new Date().toISOString(),
    networkRequests: totalNetworkRequests
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  await saveResults(result, outputSuffix);
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  printFinalSummary(result, regions);
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function saveResults(result: any, suffix: string) {
  const filename = `network-clubs-data-${suffix}.json`;
  const csvFilename = `network-clubs-data-${suffix}.csv`;
  
  const resultsPath = path.join(process.cwd(), 'results', filename);
  const csvPath = path.join(process.cwd(), 'results', csvFilename);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  const resultsDir = path.dirname(resultsPath);
  if (!fs.existsSync(resultsDir)) {
    fs.mkdirSync(resultsDir, { recursive: true });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
  fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
  console.log(`üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
  const csvContent = generateCSV(result.clubs);
  fs.writeFileSync(csvPath, csvContent, 'utf-8');
  console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${csvPath}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV
function generateCSV(clubs: any[]): string {
  const header = 'ID —Ä–µ–≥–∏–æ–Ω–∞,–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞,–ù–∞–∑–≤–∞–Ω–∏–µ,–ê–¥—Ä–µ—Å,–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å,–°—Ç—Ä–∞–Ω–∞,–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥,–¢–µ–ª–µ—Ñ–æ–Ω,–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã,–°–∞–π—Ç,–í—Å–µ —Å–∞–π—Ç—ã,–†–µ–π—Ç–∏–Ω–≥,–û—Ç–∑—ã–≤—ã,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫,–ö–∞—Ç–µ–≥–æ—Ä–∏–∏,–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã,–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏,–®–∏—Ä–æ—Ç–∞,–î–æ–ª–≥–æ—Ç–∞,–§–æ—Ç–æ,–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã\n';
  const rows = clubs.map(club => {
    const lat = club.coordinates?.lat || '';
    const lon = club.coordinates?.lon || '';
    const phones = club.phones?.join('; ') || club.phone || '';
    const websites = club.websites?.join('; ') || club.website || '';
    const categories = club.categories?.join('; ') || '';
    const socialLinks = club.socialLinks?.map((link: { type: any; url: any; }) => `${link.type}: ${link.url}`).join('; ') || '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
    const yandexMapsUrl = (club.urlSeoname && club.urlId) 
      ? `https://yandex.ru/maps/org/${club.urlSeoname}/${club.urlId}`
      : '';
    
    return `"${club.regionId || ''}",` +
           `"${(club.regionName || '').replace(/"/g, '""')}",` +
           `"${(club.name || '').replace(/"/g, '""')}",` +
           `"${(club.address || '').replace(/"/g, '""')}",` +
           `"${(club.fullAddress || '').replace(/"/g, '""')}",` +
           `"${(club.country || '').replace(/"/g, '""')}",` +
           `"${(club.postalCode || '').replace(/"/g, '""')}",` +
           `"${(club.phone || '').replace(/"/g, '""')}",` +
           `"${phones.replace(/"/g, '""')}",` +
           `"${(club.website || '').replace(/"/g, '""')}",` +
           `"${websites.replace(/"/g, '""')}",` +
           `"${club.rating || ''}",` +
           `"${club.reviews || ''}",` +
           `"${club.ratingCount || ''}",` +
           `"${categories.replace(/"/g, '""')}",` +
           `"${(club.workingHours || '').replace(/"/g, '""')}",` +
           `"${socialLinks.replace(/"/g, '""')}",` +
           `"${lat}",` +
           `"${lon}",` +
           `"${(club.photo || '').replace(/"/g, '""')}",` +
           `"${yandexMapsUrl}"`;
  }).join('\n');
  
  return header + rows;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function printFinalSummary(result: any, regions: RegionData[]) {
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('‚îÄ'.repeat(50));
  console.log(`üéØ –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.totalFound}`);
  console.log(`üèòÔ∏è –†–µ–≥–∏–æ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.regionsProcessed}`);
  console.log(`üåê Network –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.networkRequests}`);
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${result.timestamp}`);
  console.log('‚îÄ'.repeat(50));
  
  if (result.clubs.length > 0) {
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤:');
    result.clubs.slice(0, 5).forEach((club: any, index: number) => {
      console.log(`${index + 1}. ${club.name} (${club.regionName})`);
      console.log(`   üìç ${club.address}`);
      if (club.phone) console.log(`   üìû ${club.phone}`);
      if (club.rating) console.log(`   ‚≠ê ${club.rating} (${club.reviews || 0} –æ—Ç–∑—ã–≤–æ–≤)`);
      console.log('');
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    const regionStats = result.clubs.reduce((acc: any, club: any) => {
      const regionName = club.regionName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω';
      acc[regionName] = (acc[regionName] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:');
    Object.entries(regionStats)
      .sort(([,a], [,b]) => (b as number) - (a as number))
      .slice(0, 10)
      .forEach(([region, count]) => {
        console.log(`  ${region}: ${count} –∫–ª—É–±–æ–≤`);
      });
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
} 
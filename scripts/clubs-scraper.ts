import { chromium, Browser, Page } from '@playwright/test';
import { yandexMapsConfig, YANDEX_MAPS_SELECTORS } from '../config/yandex-maps.config';
import * as fs from 'fs';
import * as path from 'path';

interface ClubData {
  name: string;
  address: string;
  index: number;
}

interface ScrapingResult {
  totalFound: number;
  clubs: ClubData[];
  timestamp: string;
  sourceUrl: string;
}

export class ClubsScraper {
  private browser: Browser | null = null;
  private page: Page | null = null;
  private results: ClubData[] = [];

  async init() {
    this.browser = await chromium.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      timeout: 60000 
    });
    this.page = await this.browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º viewport
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'ru-RU,ru;q=0.9'
    });
    
    await this.page.setViewportSize({ width: 1920, height: 1080 });
  }

  async scrapeClubs(maxResults: number = 8000): Promise<ScrapingResult> {
    if (!this.page) {
      throw new Error('Scraper not initialized');
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—É–±–∞—Ö...');
    console.log(`üìç URL: ${yandexMapsConfig.startUrl}`);
    console.log(`üéØ –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${maxResults}\n`);

    try {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
      await this.page.goto(yandexMapsConfig.startUrl, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      await this.page.waitForSelector(YANDEX_MAPS_SELECTORS.nameClub, { 
        timeout: 15000 
      });

      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.scrollToLoadMore(maxResults);

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—É–±–∞—Ö
      console.log('üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—É–±–∞—Ö...');
      const clubs = await this.extractClubsData(maxResults);

      const result: ScrapingResult = {
        totalFound: clubs.length,
        clubs: clubs,
        timestamp: new Date().toISOString(),
        sourceUrl: yandexMapsConfig.startUrl
      };

      console.log(`\nüéâ –°–æ–±—Ä–∞–Ω–æ ${clubs.length} –∫–ª—É–±–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  private async scrollToLoadMore(targetCount: number) {
    if (!this.page) return;

    console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    let lastCount = 0;
    let stableCount = 0;
    let noChangeCount = 0;
    const MAX_NO_CHANGE = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    for (let i = 0; i < MAX_NO_CHANGE; i++) { 
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
      await this.page.evaluate(() => {
        const searchResults = document.querySelector('.scroll__container');
        if (searchResults) {
          searchResults.scrollTo(0, searchResults.scrollHeight);
          console.log(`üìà –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.scrollHeight}`);
        }
      });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.page.waitForTimeout(1000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const currentCount = await this.page.$$eval(
        YANDEX_MAPS_SELECTORS.nameClub, 
        elements => elements.length
      );

      console.log(`üìà –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${currentCount}`);

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      if (currentCount >= targetCount) {
        console.log(`üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${targetCount}`);
        break;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (currentCount === lastCount) {
        stableCount++;
        if (stableCount >= MAX_NO_CHANGE) {
          console.log('‚èπÔ∏è –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
          break;
        }
      } else {
        stableCount = 0;
      }

      lastCount = currentCount;
    }
  }

  private async extractClubsData(maxResults: number): Promise<ClubData[]> {
    if (!this.page) return [];

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—É–±–æ–≤
    const clubNames = await this.page.$$eval(YANDEX_MAPS_SELECTORS.nameClub, elements => 
      elements.map(el => el.textContent?.trim() || '')
    );

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–ª—É–±–æ–≤
    const clubAddresses = await this.page.$$eval(YANDEX_MAPS_SELECTORS.adressClub, elements => 
      elements.map(el => el.textContent?.trim() || '')
    );

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const clubs: ClubData[] = [];
    const count = Math.min(clubNames.length, clubAddresses.length, maxResults);

    for (let i = 0; i < count; i++) {
      clubs.push({
        index: i + 1,
        name: clubNames[i],
        address: clubAddresses[i]
      });
    }

    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—É–±—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—É–±—ã:');
    clubs.forEach((club, index) => {
      console.log(`${index + 1}. ${club.name}`);
      console.log(`   üìç ${club.address}\n`);
    });

    return clubs;
  }

  async saveResults(result: ScrapingResult, filename: string = 'clubs-data.json') {
    const resultsPath = path.join(process.cwd(), 'results', filename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ CSV —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const csvContent = this.generateCSV(result.clubs);
    const csvPath = path.join(resultsDir, 'clubs-data.csv');
    fs.writeFileSync(csvPath, csvContent, 'utf-8');
    console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${csvPath}`);
  }

  private generateCSV(clubs: ClubData[]): string {
    const header = '–ù–æ–º–µ—Ä,–ù–∞–∑–≤–∞–Ω–∏–µ,–ê–¥—Ä–µ—Å\n';
    const rows = clubs.map(club => 
      `${club.index},"${club.name.replace(/"/g, '""')}","${club.address.replace(/"/g, '""')}"`
    ).join('\n');
    
    return header + rows;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  printSummary(result: ScrapingResult) {
    console.log('\nüéØ === –°–í–û–î–ö–ê ===');
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—É–±–æ–≤: ${result.totalFound}`);
    console.log(`‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: ${new Date(result.timestamp).toLocaleString('ru-RU')}`);
    console.log(`üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.sourceUrl.substring(0, 100)}...`);
    
    if (result.clubs.length > 0) {
      console.log('\nüèÜ –¢–æ–ø-5 –∫–ª—É–±–æ–≤:');
      result.clubs.slice(0, 5).forEach((club, index) => {
        console.log(`${index + 1}. ${club.name}`);
        console.log(`   üìç ${club.address}`);
      });
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
export async function runClubsScraping(maxResults: number = 8000) {
  const scraper = new ClubsScraper();
  
  try {
    await scraper.init();
    
    console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∫–ª—É–±–∞—Ö...\n');
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const result = await scraper.scrapeClubs(maxResults);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await scraper.saveResults(result);
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    scraper.printSummary(result);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await scraper.close();
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const maxResults = parseInt(process.argv[2]) || 1000;
  runClubsScraping(maxResults).catch(console.error);
} 
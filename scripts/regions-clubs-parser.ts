import { chromium, Browser, Page } from '@playwright/test';
import { YANDEX_MAPS_SELECTORS } from '../config/yandex-maps.config';
import * as fs from 'fs';
import * as path from 'path';

interface RegionInfo {
  id: number;
  name: string;
  url: string;
}

interface ClubInfo {
  nameClub: string;
  adressClub: string;
}

interface RegionClubsData {
  region: string;
  regionId: number;
  clubs: ClubInfo[];
  clubsSum: number;
  status: 'success' | 'error';
  error?: string;
}

interface ParseResult {
  totalRegions: number;
  successfulRegions: number;
  totalClubs: number;
  regionsData: RegionClubsData[];
  timestamp: string;
}

export class RegionsClubsParser {
  private browser: Browser | null = null;
  private page: Page | null = null;


  async init() {
    this.browser = await chromium.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      timeout: 60000 
    });
    this.page = await this.browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º viewport
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'ru-RU,ru;q=0.9'
    });
    
    await this.page.setViewportSize({ width: 1920, height: 1080 });
  }

  async parseRegionClubs(region: RegionInfo): Promise<RegionClubsData> {
    if (!this.page) {
      throw new Error('Parser not initialized');
    }

    const result: RegionClubsData = {
      region: region.name,
      regionId: region.id,
      clubs: [],
      clubsSum: 0,
      status: 'error'
    };

    try {
      console.log(`üîç –ü–∞—Ä—Å–∏–º —Ä–µ–≥–∏–æ–Ω: ${region.name} (ID: ${region.id})`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏–æ–Ω–∞
      await this.page.goto(region.url, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.page.waitForTimeout(3000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      try {
        await this.page.waitForSelector(YANDEX_MAPS_SELECTORS.nameClub, { 
          timeout: 10000 
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—É–±–∞—Ö
        const clubs = await this.extractClubsData();
        
        result.clubs = clubs;
        result.clubsSum = clubs.length;
        result.status = 'success';
        
        console.log(`‚úÖ ${region.name}: –Ω–∞–π–¥–µ–Ω–æ ${clubs.length} –∫–ª—É–±–æ–≤`);
        
      } catch (error) {
        // –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        result.status = 'success'; // –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∫–ª—É–±–æ–≤
        result.clubsSum = 0;
        console.log(`üìç ${region.name}: –∫–ª—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }

    } catch (error) {
      result.status = 'error';
      result.error = error instanceof Error ? error.message : 'Unknown error';
      console.log(`‚ùå ${region.name}: –æ—à–∏–±–∫–∞ - ${result.error}`);
    }

    return result;
  }


  private async extractClubsData(): Promise<ClubInfo[]> {
    if (!this.page) return [];

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await this.scrollToLoadMore();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—É–±–æ–≤
    const clubNames = await this.page.$$eval(
      YANDEX_MAPS_SELECTORS.nameClub, 
      elements => elements.map(el => el.textContent?.trim() || '')
    );

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–ª—É–±–æ–≤
    const clubAddresses = await this.page.$$eval(
      YANDEX_MAPS_SELECTORS.adressClub, 
      elements => elements.map(el => el.textContent?.trim() || '')
    );

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const clubs: ClubInfo[] = [];
    const count = Math.min(clubNames.length, clubAddresses.length);

    for (let i = 0; i < count; i++) {
      if (clubNames[i] && clubAddresses[i]) {
        clubs.push({
          nameClub: clubNames[i],
          adressClub: clubAddresses[i]
        });
      }
    }

    return clubs;
  }

  private async scrollToLoadMore() {
    if (!this.page) return;

    console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    for (let i = 0; i < 500; i++) { 
      await this.page.evaluate(() => {
        const searchResults = document.querySelector('.scroll__container');
        if (searchResults) {
          searchResults.scrollTo(0, searchResults.scrollHeight);
        }
      });

      await this.page.waitForTimeout(2000);
    }
  }

  async parseAllRegions(): Promise<ParseResult> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
    const regions = this.loadRegionsFromFile();
    
    if (regions.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª regions-simple.json –∏–ª–∏ –æ–Ω –ø—É—Å—Ç');
    }

    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–ª—É–±–æ–≤ –≤ ${regions.length} —Ä–µ–≥–∏–æ–Ω–∞—Ö...\n`);

    const results: RegionClubsData[] = [];
    let totalClubs = 0;

    for (const region of regions) {
      const regionData = await this.parseRegionClubs(region);
      results.push(regionData);
      
      if (regionData.status === 'success') {
        totalClubs += regionData.clubsSum;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      this.printRegionResult(regionData);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
      await this.page?.waitForTimeout(2000);
    }

    const parseResult: ParseResult = {
      totalRegions: regions.length,
      successfulRegions: results.filter(r => r.status === 'success').length,
      totalClubs: totalClubs,
      regionsData: results,
      timestamp: new Date().toISOString()
    };

    return parseResult;
  }

  private loadRegionsFromFile(): RegionInfo[] {
    try {
      const filePath = path.join(process.cwd(), 'results', 'regions-simple.json');
      
      if (!fs.existsSync(filePath)) {
        console.log('‚ùå –§–∞–π–ª regions-simple.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        console.log('üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run collect-regions');
        return [];
      }

      const fileContent = fs.readFileSync(filePath, 'utf-8');
      const regions: RegionInfo[] = JSON.parse(fileContent);
      
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${regions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ regions-simple.json`);
      return regions;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ regions-simple.json:', error);
      return [];
    }
  }

  private printRegionResult(regionData: RegionClubsData) {
    console.log(`\nüìç region: ${regionData.region}`);
    console.log(`üéØ clubs: ${regionData.clubsSum}`);
    
    if (regionData.clubsSum > 0) {
      regionData.clubs.forEach((club, index) => {
        console.log(`  ${index + 1}. ${club.nameClub}`);
        console.log(`     üìç ${club.adressClub}`);
      });
    } else if (regionData.status === 'error') {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${regionData.error}`);
    } else {
      console.log(`  üì≠ –ö–ª—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }
  }

  async saveResults(result: ParseResult) {
    const resultsPath = path.join(process.cwd(), 'results', 'regions-clubs-data.json');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π CSV
    const csvContent = this.generateCSV(result.regionsData);
    const csvPath = path.join(resultsDir, 'regions-clubs.csv');
    fs.writeFileSync(csvPath, csvContent, 'utf-8');
    console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${csvPath}`);
  }

  private generateCSV(regionsData: RegionClubsData[]): string {
    let csv = '–†–µ–≥–∏–æ–Ω,ID —Ä–µ–≥–∏–æ–Ω–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞,–ê–¥—Ä–µ—Å –∫–ª—É–±–∞\n';
    
    regionsData.forEach(regionData => {
      if (regionData.clubsSum === 0) {
        csv += `"${regionData.region}",${regionData.regionId},0,"",""\n`;
      } else {
        regionData.clubs.forEach((club, index) => {
          const clubCount = index === 0 ? regionData.clubsSum : '';
          csv += `"${regionData.region}",${regionData.regionId},"${clubCount}","${club.nameClub}","${club.adressClub}"\n`;
        });
      }
    });
    
    return csv;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  printSummary(result: ParseResult) {
    console.log('\nüéØ === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===');
    console.log(`üìä –í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${result.totalRegions}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.successfulRegions}`);
    console.log(`üéÆ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—É–±–æ–≤: ${result.totalClubs}`);
    console.log(`‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${new Date(result.timestamp).toLocaleString('ru-RU')}`);
    
    // –¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—É–±–æ–≤
    const topRegions = result.regionsData
      .filter(r => r.status === 'success' && r.clubsSum > 0)
      .sort((a, b) => b.clubsSum - a.clubsSum)
      .slice(0, 5);
    
    if (topRegions.length > 0) {
      console.log('\nüèÜ –¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—É–±–æ–≤:');
      topRegions.forEach((region, index) => {
        console.log(`  ${index + 1}. ${region.region}: ${region.clubsSum} –∫–ª—É–±–æ–≤`);
      });
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
export async function runRegionsClubsParsing() {
  const parser = new RegionsClubsParser();
  
  try {
    await parser.init();
    
    console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...\n');
    
    // –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
    const result = await parser.parseAllRegions();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await parser.saveResults(result);
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    parser.printSummary(result);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
  } finally {
    await parser.close();
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runRegionsClubsParsing().catch(console.error);
} 
import { chromium, Browser, Page } from '@playwright/test';
import * as fs from 'fs';
import * as path from 'path';

interface RegionInfo {
  id: number;
  name: string;
  originalUrl: string;
  finalUrl: string;
  status: 'success' | 'error' | 'not_found';
  error?: string;
}

interface CollectionResult {
  totalProcessed: number;
  successCount: number;
  errorCount: number;
  notFoundCount: number;
  regions: RegionInfo[];
  timestamp: string;
}

export class RegionsCollector {
  private browser: Browser | null = null;
  private page: Page | null = null;
  private results: RegionInfo[] = [];
  private baseUrl = 'https://yandex.ru/maps';
  private urlParams = '/?ll=35.917421%2C56.858745&z=12';

  async init() {
    this.browser = await chromium.launch({ 
      headless: true, // –°–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      timeout: 60000 
    });
    this.page = await this.browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'ru-RU,ru;q=0.9'
    });
  }

  async collectRegion(regionId: number): Promise<RegionInfo> {
    if (!this.page) {
      throw new Error('Collector not initialized');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–æ–¥—Å—Ç–∞–≤–∫–æ–π ID
    const originalUrl = `${this.baseUrl}/${regionId}/tver${this.urlParams}`;
    
    const regionInfo: RegionInfo = {
      id: regionId,
      name: '',
      originalUrl: originalUrl,
      finalUrl: '',
      status: 'error'
    };

    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω ID: ${regionId}...`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ URL
      await this.page.goto(originalUrl, { 
        waitUntil: 'networkidle',
        timeout: 15000 
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      const finalUrl = this.page.url();
      regionInfo.finalUrl = finalUrl;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ URL
      const regionName = this.extractRegionName(finalUrl);
      
      if (regionName && regionName !== 'tver' && !finalUrl.includes('/moscow/')) {
        regionInfo.name = regionName;
        regionInfo.status = 'success';
        console.log(`‚úÖ ID ${regionId}: ${regionName}`);
      } else {
        regionInfo.status = 'not_found';
        regionInfo.error = 'Region name not extracted';
        console.log(`‚ùì ID ${regionId}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ`);
      }

    } catch (error) {
      regionInfo.status = 'error';
      regionInfo.error = error instanceof Error ? error.message : 'Unknown error';
      console.log(`‚ùå ID ${regionId}: –æ—à–∏–±–∫–∞ - ${regionInfo.error}`);
    }

    return regionInfo;
  }

  private extractRegionName(url: string): string | null {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ URL
    const patterns = [
      /\/maps\/\d+\/([^\/\?#]+)/,  // /maps/14/tver/
      /\/maps\/([^\/\?#\d][^\/\?#]*)/  // /maps/regionname/
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1] && match[1] !== 'tver') {
        return match[1];
      }
    }

    return null;
  }

  async collectRegionsRange(startId: number, endId: number): Promise<CollectionResult> {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å ID ${startId} –ø–æ ${endId}...\n`);
    
    this.results = [];
    
    for (let id = startId; id <= endId; id++) {
      const regionInfo = await this.collectRegion(id);
      this.results.push(regionInfo);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.page?.waitForTimeout(500);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ä–µ–≥–∏–æ–Ω–æ–≤
      if (id % 10 === 0) {
        const successful = this.results.filter(r => r.status === 'success').length;
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${id}/${endId}, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${successful}`);
      }
    }

    const result: CollectionResult = {
      totalProcessed: this.results.length,
      successCount: this.results.filter(r => r.status === 'success').length,
      errorCount: this.results.filter(r => r.status === 'error').length,
      notFoundCount: this.results.filter(r => r.status === 'not_found').length,
      regions: this.results,
      timestamp: new Date().toISOString()
    };

    return result;
  }

  async saveResults(result: CollectionResult, filename: string = 'regions-collection.json') {
    const resultsPath = path.join(process.cwd(), 'results', filename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –∏—Å–∫–ª—é—á–∞–µ–º not_found –∑–∞–ø–∏—Å–∏
    const filteredRegions = result.regions.filter(r => r.status !== 'not_found');
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ not_found –∑–∞–ø–∏—Å–µ–π
    const filteredResult = {
      ...result,
      regions: filteredRegions,
      savedRegionsCount: filteredRegions.length // –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fs.writeFileSync(resultsPath, JSON.stringify(filteredResult, null, 2), 'utf-8');
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath} (–∏—Å–∫–ª—é—á–µ–Ω—ã not_found: ${result.notFoundCount})`);
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    const successfulRegions = filteredRegions
      .filter(r => r.status === 'success')
      .map(r => ({ id: r.id, name: r.name, url: r.finalUrl }));
    
    const simplePath = path.join(resultsDir, 'regions-simple.json');
    fs.writeFileSync(simplePath, JSON.stringify(successfulRegions, null, 2), 'utf-8');
    console.log(`üìã –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${simplePath}`);

    // –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª (—Ç–∞–∫–∂–µ –±–µ–∑ not_found)
    const csvContent = this.generateCSV(filteredRegions);
    const csvPath = path.join(resultsDir, 'regions.csv');
    fs.writeFileSync(csvPath, csvContent, 'utf-8');
    console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${csvPath}`);
  }

  private generateCSV(regions: RegionInfo[]): string {
    const header = 'ID,–ù–∞–∑–≤–∞–Ω–∏–µ,–°—Ç–∞—Ç—É—Å,–ò—Å—Ö–æ–¥–Ω—ã–π URL,–§–∏–Ω–∞–ª—å–Ω—ã–π URL,–û—à–∏–±–∫–∞\n';
    const rows = regions.map(region => 
      `${region.id},"${region.name}","${region.status}","${region.originalUrl}","${region.finalUrl}","${region.error || ''}"`
    ).join('\n');
    
    return header + rows;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  printSummary(result: CollectionResult) {
    const savedCount = result.successCount + result.errorCount; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ success –∏ error
    
    console.log('\nüéØ === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===');
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.totalProcessed}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: ${result.successCount}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${result.errorCount}`);
    console.log(`‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ): ${result.notFoundCount}`);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ JSON: ${savedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: ${new Date(result.timestamp).toLocaleString('ru-RU')}`);
    
    if (result.successCount > 0) {
      console.log('\nüèÜ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:');
      const successful = result.regions.filter(r => r.status === 'success');
      successful.slice(0, 10).forEach(region => {
        console.log(`  ${region.id}: ${region.name}`);
      });
      
      if (successful.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${successful.length - 10} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
      }
    }

    if (result.errorCount > 0) {
      console.log('\n‚ö†Ô∏è –†–µ–≥–∏–æ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):');
      result.regions
        .filter(r => r.status === 'error')
        .slice(0, 5)
        .forEach(region => {
          console.log(`  ID ${region.id}: ${region.error}`);
        });
    }
    
    if (result.notFoundCount > 0) {
      console.log(`\nüóëÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${result.notFoundCount} –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'not_found'`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞
export async function runRegionsCollection(startId: number = 1, endId: number = 150) {
  const collector = new RegionsCollector();
  
  try {
    await collector.init();
    
    console.log('üó∫Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä ID —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏...\n');
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
    const result = await collector.collectRegionsRange(startId, endId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await collector.saveResults(result);
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    collector.printSummary(result);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ:', error);
  } finally {
    await collector.close();
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const startId = parseInt(process.argv[2]) || 1;
  const endId = parseInt(process.argv[3]) || 150;
  
  console.log(`–°–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å ID ${startId} –ø–æ ${endId}`);
  runRegionsCollection(startId, endId).catch(console.error);
} 
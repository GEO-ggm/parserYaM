import { chromium, Browser, Page, Response } from '@playwright/test';
import { yandexMapsConfig } from '../config/yandex-maps.config';
import * as fs from 'fs';
import * as path from 'path';

// –ú–æ–¥–µ–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
export interface NetworkClubsParser {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å
  isTargetRequest: (url: string, method: string) => boolean;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—É–±–∞—Ö –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
  parseClubsData: (jsonData: any) => ClubData[];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∏—Å–∫–µ
  parseSearchInfo?: (jsonData: any) => SearchInfo;
}

export interface ClubData {
  name: string;
  address: string;
  fullAddress?: string;
  country?: string;
  postalCode?: string;
  coordinates?: {
    lat: number;
    lon: number;
  };
  phone?: string;
  phones?: string[];
  website?: string;
  websites?: string[];
  rating?: number;
  reviews?: number;
  ratingCount?: number;
  categories?: string[];
  workingHours?: string;
  socialLinks?: Array<{
    type: string;
    url: string;
  }>;
  regionId?: number;
  regionName?: string;
  sourceRegionUrl?: string;
  rawData?: any; // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
}

export interface SearchInfo {
  totalFound: number;
  searchQuery: string;
  region?: string;
}

interface ScrapingResult {
  totalFound: number;
  clubs: ClubData[];
  searchInfo?: SearchInfo;
  timestamp: string;
  sourceUrl: string;
  networkRequests: number;
}

export class NetworkClubsScraper {
  private browser: Browser | null = null;
  public page: Page | null = null;
  public clubsData: ClubData[] = [];
  public networkRequests: number = 0;
  private parser: NetworkClubsParser;
  private processedCoordinates: Set<string> = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  
  constructor(parser: NetworkClubsParser) {
    this.parser = parser;
  }

  async init() {
    this.browser = await chromium.launch({ 
      headless: false,
      timeout: 60000 
    });
    this.page = await this.browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º viewport
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'ru-RU,ru;q=0.9'
    });
    
    await this.page.setViewportSize({ width: 1920, height: 1080 });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç network-–∑–∞–ø—Ä–æ—Å–æ–≤
    await this.setupNetworkInterception();
  }

  private async setupNetworkInterception() {
    if (!this.page) return;

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ response'—ã
    this.page.on('response', async (response: Response) => {
      try {
        const url = response.url();
        const method = response.request().method();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –Ω–∞–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        if (this.parser.isTargetRequest(url, method)) {
          console.log(`üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${method} ${url}`);
          this.networkRequests++;
          
          // –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
          const jsonData = await response.json();
          
          // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—É–±–∞—Ö
          const clubs = this.parser.parseClubsData(jsonData);
          
          if (clubs.length > 0) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –ª–µ—Ç—É
            const newClubs = this.filterNewClubs(clubs);
            
            if (newClubs.length > 0) {
              console.log(`üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–ª—É–±–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: ${newClubs.length} (–≤—Å–µ–≥–æ –±—ã–ª–æ: ${clubs.length})`);
              this.clubsData.push(...newClubs);
            } else {
              console.log(`üîÑ –í—Å–µ –∫–ª—É–±—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —É–∂–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ (${clubs.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);
            }
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º raw –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          await this.saveRawNetworkData(jsonData, `network-${this.networkRequests}.json`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ response: ${error}`);
      }
    });
  }

  async scrapeClubsFromNetwork(scrollIterations: number = 10): Promise<ScrapingResult> {
    if (!this.page) {
      throw new Error('Scraper not initialized');
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ network...');
    console.log(`üìç URL: ${yandexMapsConfig.startUrl}`);
    console.log(`üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: ${scrollIterations}\n`);

    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      this.clubsData = [];
      this.networkRequests = 0;
      this.processedCoordinates.clear();
      console.log('üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–±–æ—Ä–∞');

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
      await this.page.goto(yandexMapsConfig.startUrl, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      await this.page.waitForTimeout(3000);

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await this.scrollToTriggerRequests(scrollIterations);

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.page.waitForTimeout(2000);

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–¥—Ä–µ—Å—É
      const uniqueClubs = this.removeDuplicates(this.clubsData);

      const result: ScrapingResult = {
        totalFound: uniqueClubs.length,
        clubs: uniqueClubs,
        timestamp: new Date().toISOString(),
        sourceUrl: yandexMapsConfig.startUrl,
        networkRequests: this.networkRequests
      };

      console.log(`\nüéâ –°–æ–±—Ä–∞–Ω–æ ${uniqueClubs.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—É–±–æ–≤ –∏–∑ ${this.networkRequests} network-–∑–∞–ø—Ä–æ—Å–æ–≤`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  async scrollToTriggerRequests(iterations: number) {
    if (!this.page) return;

    console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    await this.page.evaluate(() => {
      const searchResults = document.querySelector('.scroll__container');
      if (searchResults) {
        searchResults.scrollTo(0, Math.max(0, searchResults.scrollTop - 100));
      }
    });
    await this.page.waitForTimeout(500);
    
    let lastClubCount = 0;
    let noChangeCount = 0;
    const MAX_NO_CHANGE = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    for (let i = 0; i < iterations; i++) { 
      const currentClubCount = this.clubsData.length;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤
      
      if (currentClubCount === lastClubCount) {
        noChangeCount++;
        console.log(`‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (${noChangeCount}/${MAX_NO_CHANGE}): ${currentClubCount}`);
        console.log(`‚ö†Ô∏è –î–µ—Ä–≥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞–∑–∞–¥`);
        await this.scrollOnMapBackward();
        
        if (noChangeCount >= MAX_NO_CHANGE) {
          console.log('üõë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä');
          break;
        }
      } else {
        noChangeCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: +${currentClubCount - lastClubCount} –∫–ª—É–±–æ–≤ (–≤—Å–µ–≥–æ: ${currentClubCount})`);
      }
      
      lastClubCount = currentClubCount;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ add-business-view
      const isAddBusinessVisible = await this.page.evaluate(() => {
        const addBusinessElement = document.querySelector('.add-business-view');
        if (addBusinessElement) {
          const rect = addBusinessElement.getBoundingClientRect();
          return rect.top >= 0 && rect.bottom <= window.innerHeight;
        }
        return false;
      });

      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–Ω, –∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
      if (isAddBusinessVisible) {
        console.log('‚è∏Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–ª–µ–º–µ–Ω—Ç add-business-view, –∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É...');
        await this.page.waitForTimeout(1000);
        
        const isStillVisible = await this.page.evaluate(() => {
          const addBusinessElement = document.querySelector('.add-business-view');
          if (addBusinessElement) {
            const rect = addBusinessElement.getBoundingClientRect();
            return rect.top >= 0 && rect.bottom <= window.innerHeight;
          }
          return false;
        });
        
        if (isStillVisible) {
          console.log('üó∫Ô∏è –≠–ª–µ–º–µ–Ω—Ç add-business-view –≤–∏–¥–µ–Ω –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É...');
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–æ–π (—Å–∫—Ä–æ–ª–ª–∏–º –Ω–∞–∑–∞–¥)
          const mapScrollResult = await this.scrollOnMapBackward();
          
          if (mapScrollResult) {
            console.log('‚úÖ –°–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥ –ø–æ –∫–∞—Ä—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await this.returnToResultsList();
            
            // –ü–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ –∫–∞—Ä—Ç–µ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            await this.page.waitForTimeout(2000);
            continue;
          } else {
            console.log('üìç –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–æ–ª–ª –ø–æ –∫–∞—Ä—Ç–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä');
            break;
          }
        }
      }

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.page.evaluate(() => {
        const searchResults = document.querySelector('.scroll__container');
        if (searchResults) {
          searchResults.scrollTo(0, searchResults.scrollHeight);
        }
      });

      console.log(`üìà –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ${i + 1}/${iterations}, —Å–æ–±—Ä–∞–Ω–æ –∫–ª—É–±–æ–≤: ${this.clubsData.length}`);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.page.waitForTimeout(1500);
    }

    console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞. –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–ª—É–±–æ–≤: ${this.clubsData.length}`);
  }

  private async scrollOnMapBackward(): Promise<boolean> {
    if (!this.page) return false;

    try {
      // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
      const mapContainer = await this.page.$('.map-container');
      
      if (!mapContainer) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã .map-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      console.log('üñ±Ô∏è –ù–∞–≤–æ–¥–∏–º –º—ã—à–∫—É –Ω–∞ –∫–∞—Ä—Ç—É...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã
      const mapBoundingBox = await mapContainer.boundingBox();
      
      if (!mapBoundingBox) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã');
        return false;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
      const centerX = mapBoundingBox.x + mapBoundingBox.width / 2;
      const centerY = mapBoundingBox.y + mapBoundingBox.height / 2;

      // –ù–∞–≤–æ–¥–∏–º –º—ã—à–∫—É –Ω–∞ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
      await this.page.mouse.move(centerX, centerY);
      await this.page.waitForTimeout(300);

      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–æ–ª–ª–æ–≤ –Ω–∞–∑–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
      await this.page.mouse.wheel(0, 500); // –ë–æ–ª—å—à–∏–π —Å–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥
      await this.page.waitForTimeout(500);
      await this.page.mouse.wheel(0, 500); // –ï—â–µ –æ–¥–∏–Ω —Å–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥
      
      await this.page.waitForTimeout(1000);

      console.log('‚úÖ –°–∫—Ä–æ–ª–ª –Ω–∞–∑–∞–¥ –ø–æ –∫–∞—Ä—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return true;

    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–æ–π: ${error}`);
      return false;
    }
  }

  private async returnToResultsList(): Promise<void> {
    if (!this.page) return;

    try {
      console.log('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      
      // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultsContainer = await this.page.$('.scroll__container');
      
      if (resultsContainer) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–ø–∏—Å–∫–∞
        const resultsBoundingBox = await resultsContainer.boundingBox();
        
        if (resultsBoundingBox) {
          // –ù–∞–≤–æ–¥–∏–º –º—ã—à–∫—É –Ω–∞ —Ü–µ–Ω—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          const centerX = resultsBoundingBox.x + resultsBoundingBox.width / 2;
          const centerY = resultsBoundingBox.y + resultsBoundingBox.height / 2;
          
          await this.page.mouse.move(centerX, centerY);
          await this.page.waitForTimeout(300);
          
          console.log('‚úÖ –§–æ–∫—É—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        }
      } else {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ .scroll__container –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error}`);
    }
  }

  private filterNewClubs(clubs: ClubData[]): ClubData[] {
    const newClubs: ClubData[] = [];
    
    for (const club of clubs) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      let coordinateKey = '';
      if (club.coordinates && club.coordinates.lat && club.coordinates.lon) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π
        const lat = Number(club.coordinates.lat).toFixed(6);
        const lon = Number(club.coordinates.lon).toFixed(6);
        coordinateKey = `${lat},${lon}`;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—É–± (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É)
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—É–± –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${club.name}`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      if (this.processedCoordinates.has(coordinateKey)) {
        console.log(`üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${club.name} (${coordinateKey})`);
        continue;
      }
      
      // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤—ã–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—É–± –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      this.processedCoordinates.add(coordinateKey);
      newClubs.push(club);
    }
    
    return newClubs;
  }

  removeDuplicates(clubs: ClubData[]): ClubData[] {
    const seenCoordinates = new Set<string>();
    return clubs.filter(club => {
      if (!club.coordinates || !club.coordinates.lat || !club.coordinates.lon) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—É–±—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        return false;
      }
      
      const lat = Number(club.coordinates.lat).toFixed(6);
      const lon = Number(club.coordinates.lon).toFixed(6);
      const coordinateKey = `${lat},${lon}`;
      
      if (seenCoordinates.has(coordinateKey)) {
        return false;
      }
      seenCoordinates.add(coordinateKey);
      return true;
    });
  }

  private async saveRawNetworkData(data: any, filename: string) {
    const debugPath = path.join(process.cwd(), 'results', 'debug', filename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É debug –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const debugDir = path.dirname(debugPath);
    if (!fs.existsSync(debugDir)) {
      fs.mkdirSync(debugDir, { recursive: true });
    }

    fs.writeFileSync(debugPath, JSON.stringify(data, null, 2), 'utf-8');
  }

  async saveResults(result: ScrapingResult, filename: string = 'network-clubs-data.json') {
    const resultsPath = path.join(process.cwd(), 'results', filename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const resultsDir = path.dirname(resultsPath);
    if (!fs.existsSync(resultsDir)) {
      fs.mkdirSync(resultsDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fs.writeFileSync(resultsPath, JSON.stringify(result, null, 2), 'utf-8');
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${resultsPath}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ CSV —Ñ–∞–π–ª
    const csvContent = this.generateCSV(result.clubs);
    const csvPath = path.join(resultsDir, 'network-clubs-data.csv');
    fs.writeFileSync(csvPath, csvContent, 'utf-8');
    console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${csvPath}`);
  }

  private generateCSV(clubs: ClubData[]): string {
    const header = '–ù–∞–∑–≤–∞–Ω–∏–µ,–ê–¥—Ä–µ—Å,–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å,–°—Ç—Ä–∞–Ω–∞,–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥,–¢–µ–ª–µ—Ñ–æ–Ω,–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã,–°–∞–π—Ç,–í—Å–µ —Å–∞–π—Ç—ã,–†–µ–π—Ç–∏–Ω–≥,–û—Ç–∑—ã–≤—ã,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫,–ö–∞—Ç–µ–≥–æ—Ä–∏–∏,–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã,–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏,–®–∏—Ä–æ—Ç–∞,–î–æ–ª–≥–æ—Ç–∞\n';
    const rows = clubs.map(club => {
      const lat = club.coordinates?.lat || '';
      const lon = club.coordinates?.lon || '';
      const phones = club.phones?.join('; ') || club.phone || '';
      const websites = club.websites?.join('; ') || club.website || '';
      const categories = club.categories?.join('; ') || '';
      const socialLinks = club.socialLinks?.map(link => `${link.type}: ${link.url}`).join('; ') || '';
      
      return `"${(club.name || '').replace(/"/g, '""')}","${(club.address || '').replace(/"/g, '""')}","${(club.fullAddress || '').replace(/"/g, '""')}","${(club.country || '').replace(/"/g, '""')}","${(club.postalCode || '').replace(/"/g, '""')}","${(club.phone || '').replace(/"/g, '""')}","${phones.replace(/"/g, '""')}","${(club.website || '').replace(/"/g, '""')}","${websites.replace(/"/g, '""')}","${club.rating || ''}","${club.reviews || ''}","${club.ratingCount || ''}","${categories.replace(/"/g, '""')}","${(club.workingHours || '').replace(/"/g, '""')}","${socialLinks.replace(/"/g, '""')}","${lat}","${lon}"`;
    }).join('\n');
    
    return header + rows;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º —Ä–µ–≥–∏–æ–Ω–æ–º
  clearRegionData() {
    this.clubsData = [];
    this.networkRequests = 0;
    this.processedCoordinates.clear();
    console.log('üåç –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞');
  }

  printSummary(result: ScrapingResult) {
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚îÄ'.repeat(50));
    console.log(`üéØ –í—Å–µ–≥–æ –∫–ª—É–±–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.totalFound}`);
    console.log(`üåê Network –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.networkRequests}`);
    console.log(`üìç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${this.processedCoordinates.size}`);
    console.log(`‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: ${result.timestamp}`);
    console.log(`üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.sourceUrl}`);
    console.log('‚îÄ'.repeat(50));
    
    if (result.clubs.length > 0) {
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤:');
      result.clubs.slice(0, 5).forEach((club, index) => {
        console.log(`${index + 1}. ${club.name}`);
        console.log(`   üìç ${club.address}`);
        if (club.fullAddress && club.fullAddress !== club.address) {
          console.log(`   üè† ${club.fullAddress}`);
        }
        if (club.phone) console.log(`   üìû ${club.phone}`);
        if (club.rating) console.log(`   ‚≠ê ${club.rating} (${club.reviews || 0} –æ—Ç–∑—ã–≤–æ–≤)`);
        if (club.categories) console.log(`   üè∑Ô∏è ${club.categories.join(', ')}`);
        if (club.workingHours) console.log(`   üïê ${club.workingHours}`);
        if (club.website) console.log(`   üåê ${club.website}`);
        console.log('');
      });
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
export async function runNetworkClubsScraping(
  parser: NetworkClubsParser, 
  scrollIterations: number = 10
) {
  const scraper = new NetworkClubsScraper(parser);
  
  try {
    await scraper.init();
    const result = await scraper.scrapeClubsFromNetwork(scrollIterations);
    await scraper.saveResults(result);
    scraper.printSummary(result);
    return result;
  } finally {
    await scraper.close();
  }
} 